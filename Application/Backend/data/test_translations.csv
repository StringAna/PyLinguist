English_code,Hindi_code
"for i in range(10):  # First digit
    for j in range(10):  # Second digit
        for k in range(10):  # Third digit
            # Checking for the conditions
            if i != 5 and j != 5 and k != 5 and i != j and i != k and j != k:
                print(i, j, k)","के लिए ई में रेंज(10): #पहला अंक
    के लिए जे में रेंज(10): #दूसरा अंक
        के लिए के में रेंज(10): #तीसरा अंक
            #शर्तों की जाँच
            अगर ई != 5 और जे != 5 और के != 5 और ई != जे और ई != के और जे != के:
                छपिये(ई, जे, के)"
"def count_distinct_states(matrix):
    count = 0
    states = set()
    for row in matrix:
        for col in row:
            state = ''.join(col)
            if state not in states:
                count += 1
            states.add(state)
    return count

matrix = [['A', 'B', 'C'],
          ['A', 'B', 'D'],
          ['A', 'B', 'C']]
print(count_distinct_states(matrix))
# Output: 4","परिभाषा count_distinct_states(मैट्रिक्स):
    गिनें = 0
    राज्य अमेरिका = सेट()
    के लिए पंक्ति में मैट्रिक्स:
        के लिए कर्नल में पंक्ति:
            राज्य = ''.जोड़(कर्नल)
            अगर राज्य ना में राज्य अमेरिका:
                गिनें += 1
            राज्य अमेरिका.योग(राज्य)
    वापस गिनें

मैट्रिक्स = [['ए', 'बी', 'सी'],
          ['ए', 'बी', 'डी'],
          ['ए', 'बी', 'सी']]
छपिये(count_distinct_states(मैट्रिक्स))
#आउटपुट: 4"
"def remove_spaces_and_punctuation(s):
    result = """"
    for char in s:
        if char.isalnum():
            result += char
    return result","परिभाषा remove_spaces_and_punctuation(एस):
    परिणाम = """"
    के लिए चार में एस:
        अगर चार.अंकाक्षर_है():
            परिणाम += चार
    वापस परिणाम"
"def remove_spaces_and_punctuation(s):
    result = """"
    for char in s:
        ascii_value = ord(char)
        if (ascii_value >= 48 and ascii_value <= 57) or (ascii_value >= 65 and ascii_value <= 90) or (ascii_value >= 97 and ascii_value <= 122):
            result += char
    return result","परिभाषा remove_spaces_and_punctuation(एस):
    परिणाम = """"
    के लिए चार में एस:
        ascii_value = क्रम(चार)
        अगर (ascii_value >= 48 और ascii_value <= 57) या (ascii_value >= 65 और ascii_value <= 90) या (ascii_value >= 97 और ascii_value <= 122):
            परिणाम += चार
    वापस परिणाम"
"import math

def is_prime(n):
    # Check if the number is less than 2 or not an integer
    if n < 2 or not isinstance(n, int):
        return ""Not Prime""

    # Check if the number is divisible by any integer from 2 to the square root of n
    for i in range(2, math.isqrt(n) + 1):
        if n % i == 0:
            return ""Not Prime""

    return ""Prime""","आयात गणित

परिभाषा is_prime(एन):
    #जाँचें कि संख्या 2 से कम है या पूर्णांक नहीं है
    अगर एन < 2 या ना उदाहरण_है(एन, अंक):
        वापस ""नहीं मुख्य""

    #जाँच करें कि संख्या 2 से n के वर्गमूल तक किसी भी पूर्णांक से विभाज्य है या नहीं
    के लिए ई में रेंज(2, गणित.आईएसक्यूआरटी(एन) + 1):
        अगर एन % ई == 0:
            वापस ""नहीं मुख्य""

    वापस ""मुख्य"""
"class String:
    def __init__(self, string):
        self.string = string

    def replace_odd_occurrences(self, substring, replace_with):
        count = self.string.count(substring)
        if count % 2 == 0 or count == 0:
            return self.string

        result = """"
        stack = []

        for i in range(len(self.string)):
            if self.string[i:i+len(substring)] == substring:
                if len(stack) > 0 and (stack[-1] == '(' or stack[-1] == '['):
                    stack.append(substring)
                    result += substring
                elif len(stack) > 0 and (stack[-1] == ')' or stack[-1] == ']'):
                    stack.pop()
                    result += substring
                else:
                    stack.append(substring)
                    result += replace_with
            else:
                result += self.string[i]

            if len(stack) > 0 and stack[-1] == substring:
                stack.pop()

        return result","वर्ग डोरी:
    परिभाषा __init__(खुद, डोरी):
        खुद.डोरी = डोरी

    परिभाषा replace_odd_occurrences(खुद, सबस्ट्रिंग, replace_with):
        गिनें = खुद.डोरी.गिनें(सबस्ट्रिंग)
        अगर गिनें % 2 == 0 या गिनें == 0:
            वापस खुद.डोरी

        परिणाम = """"
        ढेर = []

        के लिए ई में रेंज(लंबाई(खुद.डोरी)):
            अगर खुद.डोरी[ई:ई+लंबाई(सबस्ट्रिंग)] == सबस्ट्रिंग:
                अगर लंबाई(ढेर) > 0 और (ढेर[-1] == '(' या ढेर[-1] == '['):
                    ढेर.संलग्न(सबस्ट्रिंग)
                    परिणाम += सबस्ट्रिंग
                वरना_यदि लंबाई(ढेर) > 0 और (ढेर[-1] == ')' या ढेर[-1] == ']'):
                    ढेर.पॉप()
                    परिणाम += सबस्ट्रिंग
                वरना:
                    ढेर.संलग्न(सबस्ट्रिंग)
                    परिणाम += replace_with
            वरना:
                परिणाम += खुद.डोरी[ई]

            अगर लंबाई(ढेर) > 0 और ढेर[-1] == सबस्ट्रिंग:
                ढेर.पॉप()

        वापस परिणाम"
"string = ""ab(abab)aba""
substring = ""ab""
replace_with = ""123""

s = String(string)
result = s.replace_odd_occurrences(substring, replace_with)
print(result)  # Output: ""ab(abab)aba""","डोरी = ""अब(अबाब)आबा""
सबस्ट्रिंग = ""अब""
replace_with = ""123""

एस = डोरी(डोरी)
परिणाम = एस.replace_odd_occurrences(सबस्ट्रिंग, replace_with)
छपिये(परिणाम) #आउटपुट: ""ab(abab)aba"""
"def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def has_digit_7(num):
    while num > 0:
        if num % 10 == 7:
            return True
        num //= 10
    return False

def sum_of_primes():
    sum_of_primes = 0
    for num in range(1000000, 2000001):
        if is_prime(num) and not has_digit_7(num):
            sum_of_primes += num
    return sum_of_primes

result = sum_of_primes()
print(""The sum of all prime numbers between 1 million and 2 million, excluding prime numbers that contain the digit 7, is:"", result)","परिभाषा is_prime(संख्या):
    अगर संख्या <= 1:
        वापस असत्य
    के लिए ई में रेंज(2, अंक(संख्या**0.5) + 1):
        अगर संख्या % ई == 0:
            वापस असत्य
    वापस सत्य

परिभाषा has_digit_7(संख्या):
    जबतक संख्या > 0:
        अगर संख्या % 10 == 7:
            वापस सत्य
        संख्या //= 10
    वापस असत्य

परिभाषा sum_of_primes():
    sum_of_primes = 0
    के लिए संख्या में रेंज(1000000, 2000001):
        अगर is_prime(संख्या) और ना has_digit_7(संख्या):
            sum_of_primes += संख्या
    वापस sum_of_primes

परिणाम = sum_of_primes()
छपिये("" योग का सब मुख्य नंबर बीच में 1 दस लाख और 2 दस लाख, के सिवा मुख्य नंबर वह रोकना  अंक 7, है:"", परिणाम)"
"def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def find_prime_sum_array(N, M, X):
    prime_sum_array = []
    current_number = M
    sum_so_far = 0

    while len(prime_sum_array) < N and current_number <= X:
        if is_prime(sum_so_far + current_number):
            prime_sum_array.append(current_number)
            sum_so_far += current_number
        current_number += M

    if not is_prime(sum_so_far):
        return []

    return prime_sum_array

# Example usage
N = 5
M = 3
X = 20

result = find_prime_sum_array(N, M, X)
print(result)","परिभाषा is_prime(संख्या):
    अगर संख्या < 2:
        वापस असत्य
    के लिए ई में रेंज(2, अंक(संख्या ** 0.5) + 1):
        अगर संख्या % ई == 0:
            वापस असत्य
    वापस सत्य

परिभाषा find_prime_sum_array(एन, एम, एक्स):
    prime_sum_array = []
    current_number = एम
    sum_so_far = 0

    जबतक लंबाई(prime_sum_array) < एन और current_number <= एक्स:
        अगर is_prime(sum_so_far + current_number):
            prime_sum_array.संलग्न(current_number)
            sum_so_far += current_number
        current_number += एम

    अगर ना is_prime(sum_so_far):
        वापस []

    वापस prime_sum_array

#उपयोग का उदाहरण
एन = 5
एम = 3
एक्स = 20

परिणाम = find_prime_sum_array(एन, एम, एक्स)
छपिये(परिणाम)"
"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def max_prime_difference(arr):
    primes = []
    for num in arr:
        if is_prime(abs(num)):
            primes.append(abs(num))
    if len(primes) < 2:
        return 0
    max_diff = 0
    for i in range(len(primes)-1):
        diff = abs(primes[i] - primes[i+1])
        if diff > max_diff:
            max_diff = diff
    return max_diff","परिभाषा is_prime(एन):
    अगर एन < 2:
        वापस असत्य
    के लिए ई में रेंज(2, अंक(एन**0.5) + 1):
        अगर एन % ई == 0:
            वापस असत्य
    वापस सत्य

परिभाषा max_prime_difference(आगमन):
    अभाज्य = []
    के लिए संख्या में आगमन:
        अगर is_prime(निरपेक्ष_मान(संख्या)):
            अभाज्य.संलग्न(निरपेक्ष_मान(संख्या))
    अगर लंबाई(अभाज्य) < 2:
        वापस 0
    max_diff = 0
    के लिए ई में रेंज(लंबाई(अभाज्य)-1):
        अंतर = निरपेक्ष_मान(अभाज्य[ई] - अभाज्य[ई+1])
        अगर अंतर > max_diff:
            max_diff = अंतर
    वापस max_diff"
